#include <Wire.h>
#include <WiFi.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Arduino.h>
#include <neotimer.h>

Neotimer loadTimer = Neotimer(2000);

// Config for WiFi
const char* ssid = "SYL";

// Config for LED
#define LED_PIN 5


// Config for Screen
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_ADDR 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Config for Button
const int BUTTON_PIN = 37;          // 按钮连接的引脚
const int BUTTON_POWER_PIN = 38;
const unsigned long DEBOUNCE_DELAY = 50;  // 防抖时间（毫秒）
int lastButtonState = LOW;         // 上一次读取的按钮状态
int buttonState = LOW;             // 当前稳定的按钮状态
unsigned long lastDebounceTime = 0;  // 上次状态变化时的时间

// Global config
bool isEnabled = false;
enum modeList {
  MENU, MALE, FEMALE
};
modeList currentMode = MENU;

const unsigned char epd_bitmap_yuzusoft [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x07, 0xef, 0xc0, 0x00, 0x00, 0x00, 
	0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xec, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x06, 0x00, 0x00, 0x10, 0x00, 
	0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0e, 0x00, 0x00, 0x18, 0x00, 
	0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x04, 0x00, 0x00, 0x1c, 0x00, 
	0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x04, 0x00, 0x00, 0x1c, 0x00, 
	0x03, 0xfc, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x0e, 0x00, 0x00, 0x1f, 0x00, 
	0x00, 0xfe, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x02, 0x00, 0x00, 0x1d, 0x00, 
	0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x01, 0x00, 0x00, 0x1b, 0x80, 
	0x00, 0x1e, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x0b, 0x80, 0x00, 0x3f, 0xc0, 
	0x00, 0x0f, 0x00, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0xda, 0xc0, 
	0x00, 0x07, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x08, 0xb0, 0x03, 0x3e, 0xc0, 
	0x00, 0x03, 0xc1, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x0f, 0xfc, 0x87, 0xe0, 
	0x00, 0x01, 0xc3, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x14, 0xd9, 0x02, 0xe0, 
	0x00, 0x00, 0xe3, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xb0, 
	0x00, 0x00, 0xe3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb0, 
	0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 
	0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 
	0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
	0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x1d, 0x08, 0x00, 0x10, 
	0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xc0, 0x10, 0x00, 0x00, 0x00, 0x30, 0x10, 
	0x00, 0x00, 0x3c, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x0a, 0x3f, 0xc8, 0x08, 0x7f, 0xff, 0x00, 0x30, 
	0x00, 0x00, 0x3c, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x0d, 0xff, 0xe4, 0x00, 0x7f, 0xff, 0xff, 0xe0, 
	0x00, 0x00, 0x3e, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x03, 0xf3, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xf0, 
	0x00, 0x00, 0x3e, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x03, 0xc0, 0xe4, 0x00, 0x10, 0xff, 0xff, 0xf0, 
	0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x03, 0x80, 0x04, 0x00, 0x10, 0x7f, 0xff, 0xf0, 
	0x00, 0x00, 0x3e, 0x1c, 0x18, 0x00, 0x0f, 0x00, 0x03, 0xc0, 0x38, 0x20, 0x10, 0x00, 0x3c, 0x00, 
	0x00, 0x00, 0x3e, 0x14, 0x1c, 0x00, 0x1c, 0x80, 0x03, 0x68, 0x13, 0xcc, 0x10, 0x00, 0x04, 0x00, 
	0x00, 0x00, 0x7f, 0x38, 0x1e, 0x00, 0x7a, 0x00, 0x01, 0xf4, 0x28, 0x32, 0x3f, 0xf3, 0x34, 0x80, 
	0x00, 0x00, 0x7f, 0x30, 0x1e, 0x00, 0xc8, 0x08, 0x00, 0xf8, 0x5c, 0x08, 0xbb, 0xf8, 0x14, 0x00, 
	0x00, 0x00, 0x7f, 0x30, 0x1e, 0x03, 0x40, 0x30, 0x04, 0x71, 0x52, 0x2d, 0xb0, 0x70, 0x14, 0x00, 
	0x00, 0x00, 0x7f, 0x30, 0x3c, 0x05, 0x80, 0x20, 0x0b, 0x16, 0xd0, 0x0e, 0x72, 0x10, 0x14, 0x00, 
	0x00, 0x00, 0x7f, 0x18, 0x78, 0x16, 0x00, 0x20, 0x0f, 0x8e, 0x54, 0x0e, 0x70, 0x8c, 0x14, 0x00, 
	0x00, 0x00, 0x7f, 0x1f, 0xf4, 0x70, 0x00, 0x20, 0x0f, 0x03, 0x9b, 0x1e, 0x70, 0x00, 0x16, 0x00, 
	0x00, 0x00, 0x7f, 0x0f, 0xe8, 0xc0, 0x00, 0x30, 0x7f, 0x89, 0xcc, 0x66, 0x70, 0x02, 0x1e, 0x00, 
	0x00, 0x00, 0x7f, 0x0f, 0xb3, 0xc3, 0xfc, 0x3f, 0xfe, 0x04, 0xe7, 0xfc, 0x70, 0x00, 0xbf, 0x00, 
	0x00, 0x00, 0x7f, 0x02, 0xc3, 0xff, 0xff, 0x9f, 0xfc, 0x00, 0x63, 0xfa, 0x70, 0x08, 0xcf, 0x00, 
	0x00, 0x00, 0x7f, 0x80, 0x01, 0xff, 0xff, 0xcf, 0xec, 0x00, 0x71, 0xe9, 0x60, 0x1d, 0x87, 0x80, 
	0x00, 0x00, 0x3f, 0x80, 0x00, 0x3c, 0x7f, 0xa0, 0xe0, 0x00, 0x76, 0x06, 0x90, 0x36, 0x07, 0x80, 
	0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xf8, 0x4f, 0xf8, 0x03, 0x80, 
	0x00, 0x00, 0x1f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x3e, 0x0f, 0xc0, 0x01, 0x80, 
	0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void setup() {
  Serial.begin(9600);
  loadTimer.start();
  pinMode(LED_PIN, OUTPUT);
  setupWIFI();
  setupButton();
  setupDisplay();
  
}

void loop() {
  checkButton();
  Serial.printf("millis: %d\n", millis());
  digitalWrite(LED_PIN, LOW);  // 低电平点亮（常见设计）
  // Serial.printf("currentMode: %d\n", currentMode);
  if (!loadTimer.done()) return;
  switch (currentMode)
  {
    case MENU:
      drawWIFIDebug();
      break;
    case MALE:
      drawMale();
      convertMale();
      break;
    case FEMALE:
      drawFemale();
      convertFemale();
      break;
    default:
      return;
  }
}

void setupWIFI() {
  Serial.print("Connecting to open WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid); //  只需要 SSID，不需要密码

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void setupButton() {
  pinMode(BUTTON_PIN, INPUT_PULLDOWN);
  pinMode(BUTTON_POWER_PIN, OUTPUT); // Setup power for the button
}

void setupDisplay() {
  Wire.begin(8, 9);
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
  display.clearDisplay();
  display.drawBitmap(0, 0, epd_bitmap_yuzusoft, 128, 64, WHITE);
  display.display();
  
  display.clearDisplay();
}

void switchMode() {
  currentMode = static_cast<modeList>((static_cast<int>(currentMode) + 1) % 3);
  Serial.printf("current mode: %d", currentMode);
}

void checkButton() {
  // 读取当前按钮状态
  digitalWrite(BUTTON_POWER_PIN, HIGH);
  int reading = digitalRead(BUTTON_PIN);

  // 如果读取值与上次记录的不一样，说明可能刚发生跳变，将计时器重置
  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }

  // 如果经过防抖时长后，按钮状态保持稳定，则认为状态已经改变
  if ((millis() - lastDebounceTime) > DEBOUNCE_DELAY) {
    // 如果稳定状态与上一次记录的不一样，则执行任务
    if (reading != buttonState) {
      buttonState = reading;

      // 这里只在按钮从低电平切换到高电平时触发，如果你的电路接法不同请相应调整判断条件
      if (buttonState == HIGH) {
        switchMode();
      }
    }
  }
  // 保存本次读取值，供下一轮比较
  lastButtonState = reading;
}

void drawCos() {
  if (currentMode != MENU) return;

  static float phase = 0; // 相位偏移量
  display.clearDisplay();
  
  // 绘制坐标轴
  display.drawFastHLine(0, 31, SCREEN_WIDTH, SSD1306_WHITE); // X轴
  display.drawFastVLine(0, 0, SCREEN_HEIGHT, SSD1306_WHITE); // Y轴
  
  // 绘制余弦波形
  for(int x = 0; x < SCREEN_WIDTH; x++) {
    // 计算角度（包含相位偏移）
    float angle = (x + phase) * 2 * PI / SCREEN_WIDTH;
    // 计算余弦值并映射到屏幕坐标
    int y = 31 - (int)(30 * cos(angle)); // 31为垂直中心，30为振幅
    
    // 绘制波形点
    display.drawPixel(x, y, SSD1306_WHITE);
  }

  // 更新显示并调整相位
  display.display();
  phase += 1.5; // 控制波形移动速度
  
  // 相位复位
  if(phase >= SCREEN_WIDTH) {
    phase = 0;
  }
}

void drawMenuText(const char* string) {
  uint16_t textWidth, textHeight = 0;
  int16_t x, y;
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE, BLACK);
  display.getTextBounds(string, 0, 0, &x, &y, &textWidth, &textHeight);
  display.setCursor(display.width() / 2 - textWidth / 2, display.height() / 2 - textHeight / 2);
  display.print(string);
  display.display();
}

void drawWIFIDebug() {
  if (WiFi.status() == WL_CONNECTED) { // 检查 WiFi 是否已连接
    String wifiInfo = "WIFI connected to ";
    wifiInfo += WiFi.SSID(); // 获取 SSID
    wifiInfo += "\n";
    wifiInfo += "IP:";
    wifiInfo += WiFi.localIP().toString(); // 获取 IP 地址并转换为字符串
    drawMenuText(wifiInfo.c_str()); // 将组合后的字符串传递给 drawMenuText
  } else {
    drawMenuText("WiFi not connected"); // 如果未连接，显示提示信息
  }
}

void drawMale() {
  drawMenuText("Male");
}

void drawFemale() {
  drawMenuText("Female");
}

void convertMale() {
}

void convertFemale() {

}

